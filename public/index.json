[
{
	"uri": "//localhost:1313/6-codebuild/6.1-add-buildspec-and-profile/",
	"title": "Create Buildspect and Procfile",
	"tags": [],
	"description": "",
	"content": "Overview Creating a buildspec.yml file and a Procfile.txt is essential for automating and managing the build, deployment, and runtime configuration of your application. Each serves a distinct purpose in the software development lifecycle, particularly when using AWS services like CodeBuild and Elastic Beanstalk\nbuildspec.yml: This file defines the build process for AWS CodeBuild. It includes phases for installing dependencies, compiling code, running tests, and packaging the application. Customize it by specifying build commands, environment variables, and artifact locations to match your projectâ€™s needs. Procfile: Used primarily in platforms like AWS Elastic Beanstalk, the Procfile specifies the commands to start various application processes, such as web servers or worker processes. Define the types of processes and their corresponding startup commands to ensure the application runs correctly. After that commit your code to your own repository on Github and let\u0026rsquo;s get started with CodeBuild\nIn the source code folder, two deployment files have been included to facilitate the deployment process. These files are essential for automating the build and deployment of the application. However, you may choose to create and modify these files according to specific requirements or preferences\n"
},
{
	"uri": "//localhost:1313/6-codebuild/6.2--create-codebuild-project/",
	"title": "Create CodeBuild Project",
	"tags": [],
	"description": "",
	"content": "Overview AWS CodeBuild is a managed service that automates code compilation, testing, and artifact creation. It scales automatically and integrates with other AWS services, using a buildspec.yml file to configure build commands and settings.\nNavigate to the CodeBuild section on the AWS console UI Choose Create Project In the Project Configuration, enter Project Name you want In the Source section, select Source provider Connect to your Github account Choose the repository from your Github repo Config the environment In the Operating Sytems section, choose your OS Leave the Runtime(s) as default : Standard Runtime In the Image section, select the latest runtime Select new service role Enter role name Select Buildspec option to use the provided buildspec.yml file Enter Create New Project Result "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.1-create-environment-ebs/",
	"title": "Create New Elastic Beanstalk Environment",
	"tags": [],
	"description": "",
	"content": "Overview Before proceeding with the setup of AWS Elastic Beanstalk, it\u0026rsquo;s essential to first configure a new environment to ensure that the deployment process runs smoothly.\nNavigate to AWS Console UI and search Elastic Beanstalk Choose New Environment In the Environment Information, fill in Environment name you want You can choose the Domain Name you want, though it is optional. Ensure that you check the availability of the domain name.\nAfter that, select the platform, platform version and branch you want to deploy, in this tutorial will use .NET 6 on Linux In the Presets, choose High avalibility. This step allows users to efficiently set up their environment based on their specific needs, whether opting for a simple single-instance setup (potentially eligible for the free tier) or a more robust high-availability configuration. In the Application Code section, you can choose either to use the sample code for a basic deployment or to upload your own code from an S3 Bucket.\n"
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/7.1-create-new-pipeline/",
	"title": "Create New Pipline",
	"tags": [],
	"description": "",
	"content": "Overview First, we will proceed with a comprehensive, step-by-step approach to create our CI/CD pipeline using AWS CodePipeline. This process involves several key stages: beginning with the creation of the pipeline itself, where we will specify the pipeline name and configure the necessary permissions\nOpen the AWS Management Console and navigate to CodePipeline. Click Create pipeline Provide a name for your pipeline name. Choose Next, to following to next page. "
},
{
	"uri": "//localhost:1313/9-cleanup/9.1-delete-elasticbeanstalk/",
	"title": "Delete Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Clean-up Elastic Beanstalk Select the Elastic Beanstalk Environment =\u0026gt; Action =\u0026gt; Terminate Environment Enter the Environment Name Ebs-player-apis-env to delete "
},
{
	"uri": "//localhost:1313/",
	"title": "Deploy an API web application with Elastic Beanstalk and set-up CI/CD using CodePipline",
	"tags": [],
	"description": "",
	"content": "Deploy an APIs web application with Elastic Beanstalk and set-up CI/CD using CodePipline Overall In this lab, we\u0026rsquo;ll deploy a functional API application (ASP.NET 6, Swagger UI) using AWS Elastic Beanstalk, interact with AWS RDS and then set-up a pipeline for continuous integration and continuous delivery/deployment with Github and AWS CodePipeline.\n"
},
{
	"uri": "//localhost:1313/1-introduce/1.1-elasticbeanstalk/",
	"title": "Introduce to Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Overview Elastic Beanstalk is a fully managed service provided by Amazon Web Services (AWS) that simplifies the deployment and management of applications. It allows developers to quickly deploy and manage applications in various languages such as Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers like Apache, Nginx, Passenger, and IIS.\nWith Elastic Beanstalk, you simply upload your code, and the service automatically handles the deployment, from capacity provisioning, load balancing, and auto-scaling to application health monitoring. This frees developers from dealing with infrastructure management, letting them focus on writing code.\nElastic Beanstalk Advantage\nSimplified Deployment: Easy to deploy applications without managing infrastructure. Automatic Scaling: Automatically scales applications based on demand. Built-In Monitoring: Integrated with AWS CloudWatch for real-time health monitoring. Multi-Language Support: Supports various programming languages and platforms. Customizable Environments: Flexibility to customize the environment as needed. Version Control: Easy version management with rollback capabilities. Cost-Effective: Pay only for the resources used, no additional cost for Elastic Beanstalk. AWS Integration: Seamless integration with other AWS services. "
},
{
	"uri": "//localhost:1313/4-config-rds/4.1-modify-connection/",
	"title": "Modify Connection String and Inbound Rule",
	"tags": [],
	"description": "",
	"content": "For our Database instances to be able to work in the AWS cloud environment, we will need to update the Connection String and create a inbound rule to connect to our local MSSQL server.\nUpdate Connection String Go to project folder and look for appsetting.json In the Connection String, look for DefaultConnection Modify the Server, uid, pwd match with the database settings in Elastic Beanstalk. Navigate to AWS RDS Database in AWS Console UI Select the database to modify Add the following Inbound rule Next, we will proceed to migration an test our database to local MSSQL Server.\n"
},
{
	"uri": "//localhost:1313/5-publish-api/5.1-publish-to-elasticbeanstalk/",
	"title": "Publish To Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "\rIn order to publish, make sure your IDE have been installed the AWS ToolKit in the prerequiste step.\nNavigate to your project directory, then right click chooose the publish to AWS Choose Publish to Existing Target Select the Elastic Beanstalk Environment you have been created Choose Publish and then Yes Wait for AWS Toolkit to pulish to Elastic Beanstalk. Publish Sucessfull "
},
{
	"uri": "//localhost:1313/1-introduce/1.2-pipeline/",
	"title": "CI/CD using AWS CodePipeline and AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Overview of CI/CD CI/CD stands for Continuous Integration and Continuous Delivery (or Continuous Deployment), a set of practices used in modern software development to automate and streamline the process of building, testing, and deploying applications.\nContinuous Integration (CI): Involves automatically integrating code changes from multiple contributors into a shared repository several times a day. Each integration is verified by automated builds and tests, allowing teams to detect problems early.\nContinuous Delivery (CD): Extends CI by automatically deploying the application to a staging or production environment after successful builds and tests. This ensures that the software is always in a deployable state.\nAWS CodePipeline is a fully managed continuous integration and continuous delivery service that automates the steps required to release your software. With CodePipeline, you can define a series of stages, such as source, build, test, and deploy, which are triggered automatically when changes are detected in the source code repository.\nKey Features:\nAutomated Workflows: Automates the entire release process from code changes to deployment. Integration with AWS Services: Seamlessly integrates with other AWS services like CodeBuild, ECS, Lambda, and S3. Customizable Pipelines: Allows you to customize each stage of your pipeline, including using third-party tools or custom scripts. Parallel Execution: Supports parallel execution of actions to speed up the release process. Built-In Security: Offers encryption and integration with AWS Identity and Access Management (IAM) for secure access control. AWS CodeBuild is a fully managed build service that compiles source code, runs tests, and produces software packages ready for deployment. It eliminates the need to set up and manage your own build servers.\nKey Features:\nScalability: Automatically scales to handle multiple builds simultaneously, ensuring fast and reliable build times. Customizable Build Environment: Allows you to define your own build environments using Docker images, making it flexible for different programming languages and tools. Integration with CI/CD Pipelines: Easily integrates with AWS CodePipeline and other CI/CD tools to automate the build process as part of your deployment pipeline. Pay-As-You-Go Pricing: Charges only for the compute resources you use during the build process, making it cost-effective. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-clone-code/",
	"title": "Clone Code From Github",
	"tags": [],
	"description": "",
	"content": "Step-by-Step Access the folder where you want to store the code. Open Command Promt and type the command git clone https://github.com/DangLam2603/ebs-player-management-be.git After clone code successfully, open the following folder You will see the code structure to get start with the package code run on dotnet 6 runtime , so you will need to install the following SDK NET 6 SDK\n"
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.2-config-server-access/",
	"title": "Configure Server Access",
	"tags": [],
	"description": "",
	"content": "Overview In this part, we will use the modified IAM role for EC2 that we create in prerequiste ebs-ec2-webtier-role to allow Elastic Beanstalk access.\nChoose Create and Use the Servce role Enter new service role name Select ebs-ec2-webtier-role "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-create-iam-role/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role For Elastic Beanstalk Navigate to AWS Console and search for IAM Select Role from left side bar and choose Create role Choose Trusted Service Select EC2 Add the following permision AWSElasticBeanstalkWebTier Enter Role name Choose Create Role "
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/7.2-source-stage/",
	"title": "Create Source Stage",
	"tags": [],
	"description": "",
	"content": "Overview Next, to integrate GitHub with AWS CodePipeline, you\u0026rsquo;ll connect your GitHub repository as the source in the pipeline configuration\nChoose Source Provider Authorizing CodePipeline to access your GitHub account Selecting the repository and branch to monitor "
},
{
	"uri": "//localhost:1313/9-cleanup/9.2-delete-code-build/",
	"title": "Delete CodeBuild Project",
	"tags": [],
	"description": "",
	"content": "Clean-up CodeBuild Project Select the CodeBuild Project =\u0026gt; Action =\u0026gt; Delete To confirm deletion, enter delete to delete Deletion success "
},
{
	"uri": "//localhost:1313/5-publish-api/5.2-demo-web-api-success/",
	"title": "Demo And Test APIs",
	"tags": [],
	"description": "",
	"content": "\rTo validate the deployment of our APIs, initiate by obtaining the URL associated with our Elastic Beanstalk domain. The API utilizes Swagger UI for the documentation and interaction with endpoints. To access the comprehensive list of available endpoints, append ../swagger/index.html to the base URL of the domain.\nCopy and paste the domain URL ebs-player-apis-dev.ap-southeast-1.elasticbeanstalk.com/swagger/index.html Deploy sucessfully and test the APIs working with the hosted RDS database. Your API is now hosted on the AWS Cloud utilizing the Elastic Beanstalk environment, with a fully integrated RDS database. You can access the API and develop a fully functional web application for your backend, all seamlessly deployed on the AWS Cloud with robust database support from Amazon RDS.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.3-download-aws-toolkit/",
	"title": "Install AWS ToolKit for Visual Studio",
	"tags": [],
	"description": "",
	"content": "Overview AWS ToolKit is an extension for Microsoft Visual Studio running on Microsoft Windows that makes it easier for developers to develop, debug, and deploy .NET applications using Amazon Web Services. You can choose 1 of following steps to install\nUsing Direct Download Link: you can follow this link to install which fit your .NET IDE. Visual Studio Visual Studio Code JetBrains Using Extention of Visual Studio 2022 IDE: Open Visual Studio 2022 =\u0026gt; Extention =\u0026gt; choose Online and search AWS ToolKit =\u0026gt; Install AWS ToolKit for Amazon Q "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "First, let go through some defination about our main AWS services Elastic Beanstalk and CodePipeline, CodeBuild to understand how continuous integration and continuous delivery/deployment works.\nContent Elastic Beanstalk CI/CD using CodePipelne, CodeBuild "
},
{
	"uri": "//localhost:1313/4-config-rds/4.2-test-connection/",
	"title": "Migration and test database connection",
	"tags": [],
	"description": "",
	"content": "Migration In this workshop tutorial, i already provide the script of database. But you can crerate any SQL script in future deployment which fit the best.\nTest Connection Input your RDS server, Username, Password that you config in Elastic Beanstalk Migration and Refresh the server "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.4-add-inbound-rule/",
	"title": "Modify Inbound Rule",
	"tags": [],
	"description": "",
	"content": "Overview Locate to AWS Console, look for EC2 Service and select Security Group. Select and modify Your Security Group. Select Edit Inbound Rule Add Rule =\u0026gt; Select MSSQL type =\u0026gt; Save Rule In this workshop we will use MSSQL deploy to RDS Database, you can choose different database type by modify the port range to match with Database\u0026rsquo;s Port\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "In this section, we will setup the necessary and important things to perform this workshop.\nContent Clone Code From GitHub Create IAM Role Download AWS ToolKit Add Inbound Rule "
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/7.3-build-stage/",
	"title": "Create Build Stage",
	"tags": [],
	"description": "",
	"content": "Overview In the build stage of AWS CodePipeline, you\u0026rsquo;ll configure the process that compiles your source code, runs tests, and packages the application. This stage typically involves integrating with AWS CodeBuild or another build service.\nSet-up Build Provider using exiting CodeBuild project. Choose the Codebuild Project or you can create new one. "
},
{
	"uri": "//localhost:1313/9-cleanup/9.3-delete-code-pipline/",
	"title": "Delete CodePipeline",
	"tags": [],
	"description": "",
	"content": "Clean-up CodePipeline Select the CodePipeline pipeline =\u0026gt; Delete Pipeline To confirm deletion, enter delete to delete Deletion success ![select] "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/",
	"title": "Deploy Web Application With Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Once the prerequisites are set up, we\u0026rsquo;ll proceed with deploying our web API to the cloud using AWS Elastic Beanstalk. In this step, we\u0026rsquo;ll create an Elastic Beanstalk environment for deployment and connect through AWS ToolKit to upload our code from GitHub.\nContent Create Elastic Beanstalk Envronment Configure Server Access Setttings Database, VPC Config Traffic and Scaling Create Envronment Variable Review Settings Test Application "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.3-setting-database-vpc/",
	"title": "Setting VPC and Database",
	"tags": [],
	"description": "",
	"content": "Overview Next, we\u0026rsquo;ll configure VPC and create new RDS database to host our SQL Server to cloud.\nSelect the exiting or Create new Vitural Private Cloud (VPC). In this demo, i\u0026rsquo;ll choose the default VPC. Choose the Avalibility Zone you want to run your application. Select your database subnets and enable database Modify the following:\nEngine : the engine of your database (in this workshop i\u0026rsquo;ll use SQL Server) Engine Version : version of database Instance class : instance type of database Storage : database storage Username : the username of database (key to connect to database) Password : the password of database (key to connect to database) Enter Next "
},
{
	"uri": "//localhost:1313/4-config-rds/",
	"title": "Configure RDS database connection",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s go through and learn how to connect to our deployed RDS database into our local MSSQL server\nContent: Modify Connection String and Inbound Rule Test Databasbe Connection "
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/7.4-deploy-stage/",
	"title": "Create Deploy Stage",
	"tags": [],
	"description": "",
	"content": "Overview In the deploy stage of AWS CodePipeline, you set up the process to deploy your built application to a specified environment.In this workshop, we\u0026rsquo;ll involves integrating with deployment AWS Elastic Beanstalk\nChoose the source for Deploy Provider Modify the following: Region: specific areas of your deployment zone Select the Application Name of your Elastic Beanstalk Select the Environment Name of your Elastic Beanstalk Review the following steps and enter Create Pipline "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.4-create-alb-asg/",
	"title": "Create Load Balancer and Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Overview To further enhance the scalability, availability, and fault tolerance of the application, integrating an Auto Scaling Group (ASG) and a Load Balancer can be considered. These components are particularly beneficial for applications that require high availability and the ability to handle varying levels of traffic.\nChoose Default Security Group for your EC2 Setting Capacity for Auto Scaling Group Select Load Balancer Network Settings Select Load Balancer Type Select Instance Type "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.5-create-environment-variable/",
	"title": "Add Environment Variable",
	"tags": [],
	"description": "",
	"content": "Overview The following step allow us to add environment variabale inside Elastic Beanstalk for security purpose\nEnabling CloudWatch Logs for Elastic Beanstalk is an essential step for monitoring and troubleshooting your application Set the following environment variables that configure the logging behavior. ASPNETCORE_ENVIRONMENT = Development (specific the dev enviroment on NET Core) ConnectionString__DefaultConnection = \u0026quot;Your Connection String\u0026quot; (add a connection to your RDS database) "
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/7.5-result/",
	"title": "Demo Pipeline Sucessfull",
	"tags": [],
	"description": "",
	"content": "Overview With your pipeline now configured and ready to run, it\u0026rsquo;s essential to review the setup to ensure everything is functioning correctly.\nSource Stage Build Stage Deploy Stage "
},
{
	"uri": "//localhost:1313/5-publish-api/",
	"title": "Publish Code To Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "To the final step, we will upload our code to Elastic Beanstalk Environment with the support of AWS Toolkit in Visual Studio\nContent Publish To Elastic Beanstalk Demo And Test APIs "
},
{
	"uri": "//localhost:1313/6-codebuild/",
	"title": "Create CodeBuild Project",
	"tags": [],
	"description": "",
	"content": "Overview Before integrating your application with AWS CodePipeline for continuous integration and continuous delivery (CI/CD), it\u0026rsquo;s crucial to ensure that your CodeBuild project is correctly configured and optimized. CodeBuild is a fully managed build service that compiles source code, runs tests, and produces software packages ready for deployment\nContent Create Buildspec.yml and Procfile.txt Create CodeBuild Project "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.6-review-settings/",
	"title": "Review All Settings",
	"tags": [],
	"description": "",
	"content": "Overview One last step ahead , before hosting your web to cloud. Let\u0026rsquo;s review all the following,\nConfigure Environment Configure Service Access Setting Network, Datbase Config Traffic and Scaling Submit and Deploy "
},
{
	"uri": "//localhost:1313/7-create-cicd-pipeline/",
	"title": "Setup CI/CD with CodePipeline",
	"tags": [],
	"description": "",
	"content": "Overview To streamline web API deployment, weâ€™ll set up a CI/CD pipeline with AWS CodePipeline. This automates building, testing, and deploying, integrating with CodeBuild and Elastic Beanstalk. Automation enhances efficiency, reduces errors, and speeds up feature delivery.\nContent Create New Pipeline Create Source Stage Create Build Stage Create Deploy Stage Demo CI/CD working "
},
{
	"uri": "//localhost:1313/3-deploy-web-application/3.7-result/",
	"title": "Test Your Application",
	"tags": [],
	"description": "",
	"content": "Overview In this part, we will take a look at our site and check for deployment working.\nDeploying applications on Elastic Beanstalk can sometimes take several minutes to start, especially for complex applications or environments with multiple configurations\nEnviroment launched then check the URL working. Deployment Success "
},
{
	"uri": "//localhost:1313/8-demo/",
	"title": "Demo CI/CD flow",
	"tags": [],
	"description": "",
	"content": "Overview Now, let\u0026rsquo;s demostration the continuous integration and continuous delivery workflow automates the process from code commit to deployment. When a developer commits code to a GitHub repository, AWS CodePipeline detects the change and triggers the pipeline.\nCommit new change to Github Repository CodePipeline automatically detects the latest changes New API endpoint deploy sucessfull "
},
{
	"uri": "//localhost:1313/9-cleanup/",
	"title": "Cleanup Resource",
	"tags": [],
	"description": "",
	"content": "Overview To handle cleaning the AWS resource, determine which AWS resources are associated with your CI/CD pipeline, such as CodePipeline, CodeBuild projects, Elastic Beanstalk environments.\nContent Delete Elastic Beanstalk Delete Code Build Delete CodePipeline "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]